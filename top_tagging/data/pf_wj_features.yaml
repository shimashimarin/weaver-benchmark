selection:
   ### use `&`, `|`, `~` for logical operations on numpy arrays
   ### can use functions from `math`, `np` (numpy), and `awkward` in the expression

new_variables:
   ### [format] name: formula
   ### can use functions from `math`, `np` (numpy), and `awkward` in the expression
   pfcand_mask: awkward.JaggedArray.ones_like(genPart_pt)
   # sv_mask: awkward.JaggedArray.ones_like(sv_etarel)
   class_weight: awkward.JaggedArray.ones_like(gen_wgt_new)
preprocess:
  ### method: [manual, auto] - whether to use manually specified parameters for variable standardization
  method: manual
  ### data_fraction: fraction of events to use when calculating the mean/scale for the standardization
  data_fraction: 

inputs:
   pf_features:
      length: 100
      vars: 
      ### [format 1]: var_name (no transformation)
      ### [format 2]: [var_name, 
      ###              subtract_by(optional, default=None, no transf. if preprocess.method=manual, auto transf. if preprocess.method=auto), 
      ###              multiply_by(optional, default=1), 
      ###              clip_min(optional, default=-5), 
      ###              clip_max(optional, default=5), 
      ###              pad_value(optional, default=0)]
         - genPart_pt
         - genPart_eta
         - genPart_phi
         - genPart_mass
         - genPart_pdgId
   pf_mask:
      length: 100
      vars: 
         - pfcand_mask

labels:
   ### type can be `simple`, `custom`
   ### [option 1] use `simple` for binary/multi-class classification, then `value` is a list of 0-1 labels
   type: simple
   value: [
      is_sig, is_bkg,
      ]
   ### [option 2] otherwise use `custom` to define the label, then `value` is a map
   # type: custom
   # value: 
      # target_mass: np.where(fj_isQCD, fj_genjet_sdmass, fj_gen_mass) 

observers:
   - l1_pt
   - l1_eta
   - l1_phi
   - w_mass
   - w_pt
   - w_eta
   - w_phi
   - j1_pt
   - j1_eta
   - j1_phi
   - j1_mass
   - j2_pt
   - j2_eta
   - j2_phi
   - j2_mass
   - j3_pt
   - j3_eta
   - j3_phi
   - j3_mass
   - met_pt
   - ht
   - njet
   

weights:
   ### [option 1] use precomputed weights stored in the input files
   # use_precomputed_weights: true
   # weight_branches: [weight, class_weight]
   ### [option 2] compute weights on-the-fly using reweighting histograms
   use_precomputed_weights: true
   weight_branches: [gen_wgt_new, class_weight]
